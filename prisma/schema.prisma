// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("id") @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(uuid()) @map("id") @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model User {
  id                        String                @id @default(uuid()) @map("id") @db.Uuid
  name                      String?               @map("name")
  email                     String?               @unique @map("email")
  password                  String?               @map("password") // For credentials login
  createdAt                 DateTime              @default(now()) @map("created_at")
  emailVerified             DateTime?             @map("email_verified")
  image                     String?               @map("image")
  // Subscription fields
  plan                      String                @default("free") @map("plan") // free, pro, enterprise
  paystackCustomerCode      String?               @map("paystack_customer_code") // from Paystack API
  subscriptionStatus        String?               @map("subscription_status") // trialing, active, canceled
  chat_used_today           Int                   @default(0) @map("chat_used_today")
  videos_generated_this_week Int                  @default(0) @map("videos_generated_this_week")
  voice_minutes_this_week   Int                   @default(0) @map("voice_minutes_this_week")
  images_generated_this_week Int                  @default(0) @map("images_generated_this_week")
  plan_expires_at           DateTime?             @map("plan_expires_at")
  paystack_customer_id      String?               @map("paystack_customer_id")
  last_reset_date           DateTime              @default(now()) @map("last_reset_date")
  // User preferences
  preferred_model           String                @default("gpt-4o-mini") @map("preferred_model")
  preferred_temperature     Float                 @default(0.7) @map("preferred_temperature")
  accounts                  Account[]
  sessions                  Session[]
  voiceRequests             VoiceRequest[]
  usageStats                UsageStats[]
  conversations             Conversation[]
  expenses                  Expense[]
  fieldLinks                FieldLink[]           @relation("BusinessFieldLinks")
  notifications             ExpenseNotification[] @relation("BusinessNotifications")
  incomes                   Income[]
  updatedAt                 DateTime              @default(now()) @updatedAt @map("updated_at")

  @@map("User")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model VoiceRequest {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("VoiceRequest")
}

model UsageStats {
  id                Int      @id @default(autoincrement()) @map("id")
  userId            String   @map("user_id") @db.Uuid
  date              String   @map("date") // Format: YYYY-MM-DD
  messagesUsed      Int      @default(0) @map("messages_used")
  imagesGenerated   Int      @default(0) @map("images_generated")
  voiceMinutes      Int      @default(0) @map("voice_minutes")
  videosGenerated   Int      @default(0) @map("videos_generated")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("UsageStats")
}

model Conversation {
  id          String    @id @default(uuid()) @map("id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String    @map("title")
  isPinned    Boolean   @default(false) @map("is_pinned")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("Conversation")
}

model Message {
  id             String       @id @default(uuid()) @map("id") @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  role           String       @map("role") // 'user' or 'assistant'
  content        String       @map("content") @db.Text
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("Message")
}

model OpenAICost {
  id              String   @id @default(uuid()) @map("id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  model           String   @map("model") // e.g., gpt-4o, gpt-4o-mini, dall-e-3
  promptTokens    Int      @default(0) @map("prompt_tokens")
  completionTokens Int     @default(0) @map("completion_tokens")
  totalTokens     Int      @default(0) @map("total_tokens")
  estimatedCost   Float    @map("estimated_cost") // in USD
  feature         String   @map("feature") // chat, image, voice
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt])
  @@map("OpenAICost")
}

model Expense {
  id                String              @id @default(uuid()) @map("id") @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  teamId            String?             @map("team_id") @db.Uuid
  projectName       String?             @map("project_name")
  category          String              @map("category") // Transport, Food, Equipment, etc.
  amount            Decimal             @map("amount") @db.Decimal(12, 2)
  currency          String              @default("NGN") @map("currency")
  description       String?             @map("description") @db.Text
  receiptUrl        String?             @map("receipt_url")
  merchantName      String?             @map("merchant_name")
  expenseDate       DateTime            @map("expense_date")
  status            String              @default("pending") @map("status") // pending, approved, rejected, reimbursed
  approvedBy        String?             @map("approved_by") @db.Uuid
  approvedAt        DateTime?           @map("approved_at")
  // New fields for field worker submissions
  fieldLinkId       String?             @map("field_link_id") @db.Uuid
  workerName        String?             @map("worker_name")
  location          String?             @map("location")
  aiScanned         Boolean             @default(false) @map("ai_scanned")
  aiConfidence      Decimal?            @map("ai_confidence") @db.Decimal(5, 2)
  detectedCurrency  String?             @map("detected_currency")
  receiptDate       DateTime?           @map("receipt_date")
  rejectionReason   String?             @map("rejection_reason") @db.Text
  reviewedBy        String?             @map("reviewed_by") @db.Uuid
  reviewedAt        DateTime?           @map("reviewed_at")
  submissionMethod  String              @default("admin_entry") @map("submission_method") // admin_entry, field_worker, api
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  fieldLink         FieldLink?          @relation(fields: [fieldLinkId], references: [id], onDelete: SetNull)
  reimbursement     Reimbursement?
  aiLogs            AiReceiptLog[]
  notifications     ExpenseNotification[]

  @@index([userId, createdAt])
  @@index([status])
  @@index([fieldLinkId])
  @@map("Expense")
}

model Reimbursement {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  expenseId       String    @unique @map("expense_id") @db.Uuid
  amount          Decimal   @map("amount") @db.Decimal(12, 2)
  recipientEmail  String?   @map("recipient_email")
  recipientBank   String?   @map("recipient_bank")
  accountNumber   String?   @map("account_number")
  paystackRef     String?   @map("paystack_ref")
  status          String    @default("pending") @map("status") // pending, processing, completed, failed
  paidAt          DateTime? @map("paid_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  expense         Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("Reimbursement")
}

model Budget {
  id            String   @id @default(uuid()) @map("id") @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  teamId        String?  @map("team_id") @db.Uuid
  projectName   String?  @map("project_name")
  category      String?  @map("category")
  limitAmount   Decimal  @map("limit_amount") @db.Decimal(12, 2)
  spentAmount   Decimal  @default(0) @map("spent_amount") @db.Decimal(12, 2)
  period        String   @default("monthly") @map("period") // monthly, quarterly, yearly
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("Budget")
}

model OrganizationProfile {
  id                    String   @id @default(uuid()) @map("id") @db.Uuid
  userId                String   @unique @map("user_id") @db.Uuid
  organizationName      String   @map("organization_name")
  website               String?  @map("website")
  phoneNumber           String   @map("phone_number")
  address               String   @map("address") @db.Text
  representativeName    String   @map("representative_name")
  businessEmail         String   @map("business_email")
  monthlyBudget         Decimal  @default(100000) @map("monthly_budget") @db.Decimal(12, 2)
  currency              String   @default("NGN") @map("currency")
  onboardingCompleted   Boolean  @default(false) @map("onboarding_completed")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("OrganizationProfile")
}

model FieldLink {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  businessId      String    @map("business_id") @db.Uuid
  workerName      String    @map("worker_name")
  workerEmail     String?   @map("worker_email")
  workerPhone     String?   @map("worker_phone")
  projectName     String?   @map("project_name")
  inviteToken     String    @unique @map("invite_token")
  expiresAt       DateTime  @map("expires_at")
  allowedActions  String[]  @default(["submit_expense"]) @map("allowed_actions")
  isActive        Boolean   @default(true) @map("is_active")
  maxUses         Int?      @map("max_uses")
  currentUses     Int       @default(0) @map("current_uses")
  metadata        Json      @default("{}") @map("metadata")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  business        User      @relation("BusinessFieldLinks", fields: [businessId], references: [id], onDelete: Cascade)
  expenses        Expense[]

  @@index([businessId])
  @@index([inviteToken])
  @@index([isActive, expiresAt])
  @@map("FieldLink")
}

model AiReceiptLog {
  id                String    @id @default(uuid()) @map("id") @db.Uuid
  expenseId         String    @map("expense_id") @db.Uuid
  modelUsed         String    @default("gpt-4o-mini") @map("model_used")
  promptTokens      Int       @default(0) @map("prompt_tokens")
  completionTokens  Int       @default(0) @map("completion_tokens")
  totalTokens       Int       @default(0) @map("total_tokens")
  costUsd           Decimal   @default(0) @map("cost_usd") @db.Decimal(10, 6)
  rawResponse       Json?     @map("raw_response")
  confidenceScore   Decimal?  @map("confidence_score") @db.Decimal(5, 2)
  extractionStatus  String    @default("success") @map("extraction_status")
  errorMessage      String?   @map("error_message") @db.Text
  createdAt         DateTime  @default(now()) @map("created_at")

  expense           Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([expenseId])
  @@map("AiReceiptLog")
}

model ExpenseNotification {
  id                String    @id @default(uuid()) @map("id") @db.Uuid
  businessId        String    @map("business_id") @db.Uuid
  expenseId         String    @map("expense_id") @db.Uuid
  notificationType  String    @map("notification_type") // new_submission, status_change, approval_required
  title             String    @map("title")
  message           String    @map("message") @db.Text
  isRead            Boolean   @default(false) @map("is_read")
  sentViaEmail      Boolean   @default(false) @map("sent_via_email")
  emailSentAt       DateTime? @map("email_sent_at")
  metadata          Json      @default("{}") @map("metadata")
  createdAt         DateTime  @default(now()) @map("created_at")

  business          User      @relation("BusinessNotifications", fields: [businessId], references: [id], onDelete: Cascade)
  expense           Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@index([businessId, isRead])
  @@index([businessId])
  @@map("ExpenseNotification")
}

model Income {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  source          String    @map("source") // Salary, Client Payment, Investment, etc.
  category        String    @map("category") // Monthly Salary, Project Payment, Bonus, etc.
  amount          Decimal   @map("amount") @db.Decimal(12, 2)
  currency        String    @default("NGN") @map("currency")
  description     String?   @map("description") @db.Text
  receiptUrl      String?   @map("receipt_url")
  incomeDate      DateTime  @map("income_date")
  status          String    @default("received") @map("status") // pending, received, cancelled
  projectName     String?   @map("project_name")
  clientName      String?   @map("client_name")
  invoiceNumber   String?   @map("invoice_number")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@map("Income")
}