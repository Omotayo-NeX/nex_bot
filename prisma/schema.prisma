// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @map("id") @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(uuid()) @map("id") @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model User {
  id                        String         @id @default(uuid()) @map("id") @db.Uuid
  name                      String?        @map("name")
  email                     String?        @unique @map("email")
  password                  String?        @map("password") // For credentials login
  createdAt                 DateTime       @default(now()) @map("created_at")
  emailVerified             DateTime?      @map("email_verified")
  image                     String?        @map("image")
  // Subscription fields
  plan                      String         @default("free") @map("plan") // free, pro, enterprise
  paystackCustomerCode      String?        @map("paystack_customer_code") // from Paystack API
  subscriptionStatus        String?        @map("subscription_status") // trialing, active, canceled
  chat_used_today           Int            @default(0) @map("chat_used_today")
  videos_generated_this_week Int           @default(0) @map("videos_generated_this_week")
  voice_minutes_this_week   Int            @default(0) @map("voice_minutes_this_week")
  images_generated_this_week Int           @default(0) @map("images_generated_this_week")
  plan_expires_at           DateTime?      @map("plan_expires_at")
  paystack_customer_id      String?        @map("paystack_customer_id")
  last_reset_date           DateTime       @default(now()) @map("last_reset_date")
  // User preferences
  preferred_model           String         @default("gpt-4o-mini") @map("preferred_model")
  preferred_temperature     Float          @default(0.7) @map("preferred_temperature")
  accounts                  Account[]
  sessions                  Session[]
  voiceRequests             VoiceRequest[]
  usageStats                UsageStats[]
  conversations             Conversation[]
  updatedAt                 DateTime       @default(now()) @updatedAt @map("updated_at")

  @@map("User")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model VoiceRequest {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("VoiceRequest")
}

model UsageStats {
  id                Int      @id @default(autoincrement()) @map("id")
  userId            String   @map("user_id") @db.Uuid
  date              String   @map("date") // Format: YYYY-MM-DD
  messagesUsed      Int      @default(0) @map("messages_used")
  imagesGenerated   Int      @default(0) @map("images_generated")
  voiceMinutes      Int      @default(0) @map("voice_minutes")
  videosGenerated   Int      @default(0) @map("videos_generated")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("UsageStats")
}

model Conversation {
  id          String    @id @default(uuid()) @map("id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String    @map("title")
  isPinned    Boolean   @default(false) @map("is_pinned")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("Conversation")
}

model Message {
  id             String       @id @default(uuid()) @map("id") @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  role           String       @map("role") // 'user' or 'assistant'
  content        String       @map("content") @db.Text
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("Message")
}