name: 'Security Workflow'

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  schedule:
    # Run daily at 03:00 UTC
    - cron: '0 3 * * *'
  # Allow manual trigger for testing
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  security-audit:
    name: 'Security Audit & Dependency Check'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          
      - name: 'Setup pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: '9.12.3'
          
      - name: 'Install dependencies with frozen lockfile'
        run: pnpm install --frozen-lockfile
        
      - name: 'Run security audit'
        id: audit
        run: |
          echo "Running pnpm audit..."
          
          # Run audit and capture results
          if pnpm audit --json > audit-results.json 2>/dev/null; then
            echo "‚úÖ No vulnerabilities found"
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "audit_status=clean" >> $GITHUB_OUTPUT
          else
            # Check if audit failed due to vulnerabilities or other issues
            if [ -s audit-results.json ]; then
              echo "‚ö†Ô∏è Vulnerabilities found"
              echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
              echo "audit_status=vulnerable" >> $GITHUB_OUTPUT
              
              # Extract vulnerability summary
              VULN_COUNT=$(jq -r '.metadata.vulnerabilities | length' audit-results.json 2>/dev/null || echo "0")
              echo "vulnerability_count=$VULN_COUNT" >> $GITHUB_OUTPUT
              
              # Create formatted summary
              echo "VULNERABILITY_SUMMARY<<EOF" >> $GITHUB_OUTPUT
              echo "## Security Audit Results" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "**Vulnerabilities Found:** $VULN_COUNT" >> $GITHUB_OUTPUT
              echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
              echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              
              # Add detailed vulnerability information
              if command -v jq >/dev/null 2>&1 && [ -s audit-results.json ]; then
                echo "### Vulnerability Details:" >> $GITHUB_OUTPUT
                jq -r '.vulnerabilities[] | "- **\(.title // "Unknown")** (\(.severity // "unknown"))\n  - Package: \(.name // "unknown")\n  - Vulnerable versions: \(.range // "unknown")\n  - More info: \(.url // "N/A")\n"' audit-results.json >> $GITHUB_OUTPUT 2>/dev/null || echo "Could not parse detailed vulnerability information" >> $GITHUB_OUTPUT
              fi
              
              echo "" >> $GITHUB_OUTPUT
              echo "### Next Steps:" >> $GITHUB_OUTPUT
              echo "1. Review the vulnerabilities listed above" >> $GITHUB_OUTPUT
              echo "2. Update affected packages to patched versions" >> $GITHUB_OUTPUT
              echo "3. Run \`pnpm audit fix\` to automatically fix issues" >> $GITHUB_OUTPUT
              echo "4. Run \`pnpm audit\` locally to verify fixes" >> $GITHUB_OUTPUT
              echo "5. Update lockfiles and commit changes" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "---" >> $GITHUB_OUTPUT
              echo "*This issue was automatically created by the Security Workflow.*" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Audit command failed"
              echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
              echo "audit_status=error" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: 'Find existing security issue'
        id: find-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'dependencies', 'high-priority'],
              state: 'open'
            });
            
            const securityIssue = issues.data.find(issue => 
              issue.title.includes('Security vulnerabilities detected in dependencies')
            );
            
            if (securityIssue) {
              console.log(`Found existing security issue: #${securityIssue.number}`);
              return securityIssue.number;
            }
            
            console.log('No existing security issue found');
            return null;
            
      - name: 'Create or update security issue'
        if: steps.audit.outputs.vulnerabilities_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const existingIssueNumber = ${{ steps.find-issue.outputs.result }};
            const vulnerabilityCount = '${{ steps.audit.outputs.vulnerability_count }}';
            const summary = `${{ steps.audit.outputs.VULNERABILITY_SUMMARY }}`;
            
            if (existingIssueNumber) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssueNumber,
                body: `## üîÑ Updated Security Audit Results\n\n${summary}`
              });
              
              console.log(`Updated existing security issue #${existingIssueNumber}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '‚ö†Ô∏è Security vulnerabilities detected in dependencies',
                body: summary,
                labels: ['security', 'dependencies', 'high-priority']
              });
              
              console.log(`Created new security issue #${issue.data.number}`);
            }
            
      - name: 'Auto-close resolved security issue'
        if: steps.audit.outputs.vulnerabilities_found == 'false' && steps.audit.outputs.audit_status == 'clean'
        uses: actions/github-script@v7
        with:
          script: |
            const existingIssueNumber = ${{ steps.find-issue.outputs.result }};
            
            if (existingIssueNumber) {
              // Close the issue with a success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssueNumber,
                body: `‚úÖ **Security audit passed. No vulnerabilities found.**\n\n` +
                      `All dependencies have been verified as secure as of ${new Date().toUTCString()}.\n\n` +
                      `**Triggered by:** ${{ github.event_name }}\n` +
                      `**Commit:** ${{ github.sha }}\n\n` +
                      `This issue is being automatically closed. A new issue will be created if vulnerabilities are detected in future scans.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssueNumber,
                state: 'closed'
              });
              
              console.log(`Closed security issue #${existingIssueNumber} - no vulnerabilities found`);
            } else {
              console.log('No existing security issue to close - audit clean');
            }
            
      - name: 'Summary'
        run: |
          echo "## Security Audit Summary"
          echo "- **Audit Status:** ${{ steps.audit.outputs.audit_status == 'clean' && '‚úÖ Clean' || steps.audit.outputs.audit_status == 'vulnerable' && '‚ö†Ô∏è Vulnerabilities Found' || '‚ùå Error' }}"
          echo "- **Triggered by:** ${{ github.event_name }}"
          echo "- **Branch:** ${{ github.ref_name }}"
          
          if [ "${{ steps.audit.outputs.vulnerabilities_found }}" = "true" ]; then
            echo "- **Vulnerability Count:** ${{ steps.audit.outputs.vulnerability_count }}"
            echo "- **Action Taken:** Security issue created/updated"
          elif [ "${{ steps.audit.outputs.audit_status }}" = "clean" ]; then
            echo "- **Action Taken:** ${{ steps.find-issue.outputs.result != 'null' && 'Existing security issue closed' || 'No action needed' }}"
          fi